s

BRACKET = {'}': '{', ')': '(', ']': '['}
BRACKET_L, BRACKET_R = BRACKET.values(), BRACKET.keys()
 
 
def Check_bracket(s):
	arr = []
	for c in s:
		if c in BRACKET_L:
			# 左括号入栈
			arr.append(c)
		elif c in BRACKET_R:
			# 右括号，要么栈顶元素出栈，要么匹配失败
			if arr and arr[-1] == BRACKET[c]:
				arr.pop()
			else:
				return False
	return True
 
 

ans=0
for one_str in s:
	if Check_bracket(one_str):
		print(one_str,"is mathch")
		ans+=1
	else:
		print(one_str,"is no")
print(ans)